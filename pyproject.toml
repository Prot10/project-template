[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "template"
version = "0.0.0"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.13"
dependencies = []
# description = "description of the project"
# authors = [{ name = "" }]
# license = { file = "LICENSE" }
# keywords = ["keyword1", "keyword2"]
# classifiers = [
#   "Intended Audience :: Developers",
#   "Intended Audience :: Science/Research",
#   "Programming Language :: Python :: 3",
#   "Programming Language :: Python :: 3.11",
#   "Topic :: Scientific/Engineering :: Artificial Intelligence",
# ]

# [project.urls]
# Documentation = "https://link.to.documentation"

[tool.setuptools.packages.find]
where = ["src"]
namespaces = true

[dependency-groups]
dev = [
  "dvc[ssh]",
  "mypy",
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "ruff",
]

# [project.scripts]
# script-name = "module:function"

# [tool.setuptools.package-data]
# template = ["py.typed"]

[tool.ruff]
lint.select = [ # See https://docs.astral.sh/ruff/rules/
  "F",    # flake8 (pyflakes)
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "I",    # isort
  "N",    # pep8-naming
  "D",    # flake8-docstrings (pydocstyle)
  "UP",   # pyupgrade
  "S",    # flake8-bandit
  "BLE",  # flake8-blind-except
  "FBT",  # flake8-boolean-trap maybe add this
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez
  "T10",  # flake8-debugger (to remove breakpoint())
  "EM",   # flake8-errmsg
  "G",    # flake8-logging-format
  "INP",  # flake8-no-pep420
  "PIE",  # flake8-pie
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise (to remove unused parethesis in raise)
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots (enforce __slots__ for some subclasses)
  "SIM",  # flake8-simplify
  "TID",  # flask8-tidy-imports
  "TCH",  # flake8-type-checking
  "PTH",  # flake8-use-pathlib
  "PGH",  # pygrep-hooks (mostly to check for invalid-mock-access)
  "TRY",  # tryceratops
  "NPY",  # numpy-specific rules
  "PERF", # perflint
  "FURB", # refurb
  "LOG",  # flake8-logging
  "RUF",  # ruff-specific rules
]
line-length = 120
pydocstyle.convention = "numpy"
flake8-pytest-style.fixture-parentheses = false
flake8-pytest-style.mark-parentheses = false
per-file-ignores."tests/**/*.py" = ["S101", "SLF", "INP"]

[tool.mypy]
python_version = "3.11"
disable_error_code = ["import-untyped"]
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "--cov=src/ -v --cov-report=term-missing --durations=20 --no-cov-on-fail"
